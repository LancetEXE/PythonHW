# Начните работу над проектом «Склад оргтехники».
# Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов.
# В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.

# Продолжить работу над первым заданием.
# Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники,
# а также других данных, можно использовать любую подходящую структуру, например словарь.

# Продолжить работу над вторым заданием.
# Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать
# в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.

class office_eqp:
    def __init__(self, name, price, quantity, number_of_lists, *args):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.numb = number_of_lists
        self.storage = []
        self.final_storage = []
        self.units = {"Модель устройства": self.name, "Стоимость": self.price, "Количество": self.quantity}

    def __str__(self):
        return f"{self.name} стоимость {self.price} количество {self.quantity}"

    def warehouse(self):
        while True:
            try:
                user_n = input("Введите наименование устройства: ")
                user_p = int(input("Введите стоимость устройства: "))
                user_q = int(input("Введите количество устройств данного вида: "))
                device = {"Модель устройства": user_n, "стоимость": user_p, "Количество": user_q}
                self.units.update(device)
                self.storage.append(self.units)
                print(f"Текущий список устройств: \n {self.storage}")
            except:
                return f"Ошибка ввода!"

            q = input(f"Для выхода введите - Q, продолжение - Enter: ")
            if q == 'Q' or q == 'q':
                self.final_storage.append(self.storage)
                print(f"Весь склад -\n {self.final_storage}")
                return f'Программа завершена'
            else:
                return office_eqp.warehouse(self)


class Printer(office_eqp):
    def to_print(self):
        return f"Печатаем тестовую страницу {self.numb} раз(а)"


class Scanner(office_eqp):
    def to_scan(self):
        return f"Сканируем {self.numb} документ(а/ов)"


class Xerox(office_eqp):
    def to_copy(self):
        return f"Делаем {self.numb} копий(и) документов"


device_1 = Printer("Cannon", 5100, 3, 12)
device_2 = Scanner("Canon", 4200, 5, 10)
device_3 = Xerox("Xerox", 8700, 1, 20)
print(device_1.warehouse())
print(device_2.warehouse())
print(device_3.warehouse())
print(device_1.to_print())
print(device_3.to_copy())
